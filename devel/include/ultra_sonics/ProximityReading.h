// Generated by gencpp from file ultra_sonics/ProximityReading.msg
// DO NOT EDIT!


#ifndef ULTRA_SONICS_MESSAGE_PROXIMITYREADING_H
#define ULTRA_SONICS_MESSAGE_PROXIMITYREADING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ultra_sonics
{
template <class ContainerAllocator>
struct ProximityReading_
{
  typedef ProximityReading_<ContainerAllocator> Type;

  ProximityReading_()
    : x_rotation(0)
    , y_rotation(0)
    , distance(0.0)
    , accuracy(0.0)  {
    }
  ProximityReading_(const ContainerAllocator& _alloc)
    : x_rotation(0)
    , y_rotation(0)
    , distance(0.0)
    , accuracy(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _x_rotation_type;
  _x_rotation_type x_rotation;

   typedef int16_t _y_rotation_type;
  _y_rotation_type y_rotation;

   typedef float _distance_type;
  _distance_type distance;

   typedef float _accuracy_type;
  _accuracy_type accuracy;




  typedef boost::shared_ptr< ::ultra_sonics::ProximityReading_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ultra_sonics::ProximityReading_<ContainerAllocator> const> ConstPtr;

}; // struct ProximityReading_

typedef ::ultra_sonics::ProximityReading_<std::allocator<void> > ProximityReading;

typedef boost::shared_ptr< ::ultra_sonics::ProximityReading > ProximityReadingPtr;
typedef boost::shared_ptr< ::ultra_sonics::ProximityReading const> ProximityReadingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ultra_sonics::ProximityReading_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ultra_sonics::ProximityReading_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ultra_sonics

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'ultra_sonics': ['/home/parallels/Desktop/catkin_ws/src/drivers/ultra_sonics/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ultra_sonics::ProximityReading_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ultra_sonics::ProximityReading_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ultra_sonics::ProximityReading_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ultra_sonics::ProximityReading_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ultra_sonics::ProximityReading_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ultra_sonics::ProximityReading_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ultra_sonics::ProximityReading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dbb137e6f965ad94062061ffcffb2bb9";
  }

  static const char* value(const ::ultra_sonics::ProximityReading_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdbb137e6f965ad94ULL;
  static const uint64_t static_value2 = 0x062061ffcffb2bb9ULL;
};

template<class ContainerAllocator>
struct DataType< ::ultra_sonics::ProximityReading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ultra_sonics/ProximityReading";
  }

  static const char* value(const ::ultra_sonics::ProximityReading_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ultra_sonics::ProximityReading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 x_rotation\n\
int16 y_rotation\n\
float32 distance\n\
float32 accuracy\n\
";
  }

  static const char* value(const ::ultra_sonics::ProximityReading_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ultra_sonics::ProximityReading_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_rotation);
      stream.next(m.y_rotation);
      stream.next(m.distance);
      stream.next(m.accuracy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProximityReading_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ultra_sonics::ProximityReading_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ultra_sonics::ProximityReading_<ContainerAllocator>& v)
  {
    s << indent << "x_rotation: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x_rotation);
    s << indent << "y_rotation: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y_rotation);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "accuracy: ";
    Printer<float>::stream(s, indent + "  ", v.accuracy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ULTRA_SONICS_MESSAGE_PROXIMITYREADING_H
